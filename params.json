{"name":"Frameworks","tagline":"","body":"DSL Framework for Apache Poi\r\n==============================\r\n\r\nIntroduction\r\n------------------------------\r\nThe present project try to make the Excel development easy through Fluent Api for create Excel documents. The core Api for the DSL [^fluentApi] is based on [Apache POI](http://poi.apache.org/ \"Apache POI Home\").\r\n\r\nExcel Column Annotation\r\n------------------------------\r\nThe engine of the DSL for create Excel documents use the `@ExcelColumn` annotation to create the whole Document. Basically, you have to decorate the attributes on your class with the Annotation and add properties that will map on the cell.\r\n\r\nLet's to build a excel document like it show next:\r\n\r\n| Persona |  Cantidad |  Edad | Fecha \r\n--------- | --------- | ----- | --------\r\nCristiano Ronaldo   | 1344.567   |  29   | 27/09/2014\r\nMessi   | 2344.567   |  27   | 27/09/2014\r\nBale   | 544.567   |  25   | 27/09/2014\r\n\r\nThe steps for create a document are shown next:\r\n> **Steps:**\r\n\r\n> 1. Create a JavaBean Class. and add an **`@ExcelAnnotation`** on each property of the class property where we want to map in the excel document.\r\n>1. Configure the The DSL for create the Document.\r\n\r\n###Create a JavaBean Class###\r\n\r\nThe Pojo created is shown next:\r\n\r\n```\r\npublic class Persona {\r\n\r\n    @ExcelColumn(name = \"Persona\")\r\n\tprivate String persona;\r\n\r\n\t@ExcelColumn(name = \"Cantidad\")\r\n\tprivate double cantidad;\r\n\r\n\t@ExcelColumn(name = \"Edad\")\r\n\tprivate int edad;\r\n\r\n\t@ExcelColumn(name = \"Fecha\")\r\n\tprivate Date fecha;\r\n\t\r\n   //Getters and Setters methods\r\n     .\r\n     .\r\n```\r\n###Configure the The DSL for create the Document.###\r\n\r\nHere I show a snipped of code for create a document Based on the DSL and `@ExcelColumn` annotation:\r\n\r\n```\r\nimport static com.danimaniarqsoft.report.poi.dsl.WorkbookBuilder.createWorkbook;\r\nWorkbook wb = createWorkbook(WorkbookEnum.XLSX)\r\n              .createSheet(\"hoja1\")\r\n              .createHeader(Persona.class)\r\n              .createRows(personas, Persona.class)\r\n              .buildWorkbook();\r\n```\r\n\r\n### @ExcelAnnotation####\r\n\r\nThe `@ExcelAnnotation` has a lot of properties for control the way that the DSL have to build the Excel Document. The next table describe each property:\r\n\r\nAligments\r\n\r\nProperty    | Description   | Default\r\n----------- | ------------- | -------\r\n name       | The name of the column | nothing, it is mandatory\r\ndateFormat | This property is used for java.util.Date type. The value is a String with the date format defined on [Java Date Format](http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html) | `\"dd/MM/YYYY\"`\r\ntextPosition | this property is used for align vertical text both Horizontally and vertically on a Cell | `TextPosition.ALIGN_CENTER` \r\nfontFormat | this property is used for font format | `FontFormat.NORMAL`\r\n\r\n\r\n[^fluentApi]:**Fluent Interface**, [Martin Fowler](http://martinfowler.com/bliki/FluentInterface.html) on December twenty of 2005 write about a certain style of interface which he decided to name **fluent interface**. We write DSL's based on the concept of **Fluent Interface**\r\n\r\n\r\n&copy; danimaniArqsoft","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}